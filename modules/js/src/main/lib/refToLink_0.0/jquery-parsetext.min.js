//ADDED FOR LEOS LOADING: START
(function ($, window, define) {
//ADDED FOR LEOS LOADING: END  
    
    ;(function (window) {
        window.Base64 = {
            _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
            encode: function (r) {
                var t, e, o, a, h, n, c, d = "", C = 0;
                for (r = Base64._utf8_encode(r); C < r.length;) t = r.charCodeAt(C++), e = r.charCodeAt(C++), o = r.charCodeAt(C++), a = t >> 2, h = (3 & t) << 4 | e >> 4, n = (15 & e) << 2 | o >> 6, c = 63 & o, isNaN(e) ? n = c = 64 : isNaN(o) && (c = 64), d = d + this._keyStr.charAt(a) + this._keyStr.charAt(h) + this._keyStr.charAt(n) + this._keyStr.charAt(c);
                return d
            },
            decode: function (r) {
                var t, e, o, a, h, n, c, d = "", C = 0;
                for (r = r.replace(/[^A-Za-z0-9\+\/\=]/g, ""); C < r.length;) a = this._keyStr.indexOf(r.charAt(C++)), h = this._keyStr.indexOf(r.charAt(C++)), n = this._keyStr.indexOf(r.charAt(C++)), c = this._keyStr.indexOf(r.charAt(C++)), t = a << 2 | h >> 4, e = (15 & h) << 4 | n >> 2, o = (3 & n) << 6 | c, d += String.fromCharCode(t), 64 != n && (d += String.fromCharCode(e)), 64 != c && (d += String.fromCharCode(o));
                return d = Base64._utf8_decode(d)
            },
            _utf8_encode: function (r) {
                r = r.replace(/\r\n/g, "\n");
                for (var t = "", e = 0; e < r.length; e++) {
                    var o = r.charCodeAt(e);
                    128 > o ? t += String.fromCharCode(o) : o > 127 && 2048 > o ? (t += String.fromCharCode(o >> 6 | 192), t += String.fromCharCode(63 & o | 128)) : (t += String.fromCharCode(o >> 12 | 224), t += String.fromCharCode(o >> 6 & 63 | 128), t += String.fromCharCode(63 & o | 128))
                }
                return t
            },
            _utf8_decode: function (r) {
                for (var t = "", e = 0, o = c1 = c2 = 0; e < r.length;) o = r.charCodeAt(e), 128 > o ? (t += String.fromCharCode(o), e++) : o > 191 && 224 > o ? (c2 = r.charCodeAt(e + 1), t += String.fromCharCode((31 & o) << 6 | 63 & c2), e += 2) : (c2 = r.charCodeAt(e + 1), c3 = r.charCodeAt(e + 2), t += String.fromCharCode((15 & o) << 12 | (63 & c2) << 6 | 63 & c3), e += 3);
                return t
            }
        };
    })(window);
    ;(function ($, window) {
        if (!String.prototype.repeat) {
            String.prototype.repeat = function (count) {
                'use strict';
                if (this == null) {
                    throw new TypeError('can\'t convert ' + this + ' to object');
                }
                var str = '' + this;
                count = +count;
                if (count != count) {
                    count = 0;
                }
                if (count < 0) {
                    throw new RangeError('repeat count must be non-negative');
                }
                if (count == Infinity) {
                    throw new RangeError('repeat count must be less than infinity');
                }
                count = Math.floor(count);
                if (str.length == 0 || count == 0) {
                    return '';
                }
                if (str.length * count >= 1 << 28) {
                    throw new RangeError('repeat count must not overflow maximum string size');
                }
                var rpt = '';
                for (; ;) {
                    if ((count & 1) == 1) {
                        rpt += str;
                    }
                    count >>>= 1;
                    if (count == 0) {
                        break;
                    }
                    str += str;
                }
                return rpt;
            }
        }
        var _ = {each: $.each, toString: Object.prototype.toString};
        _.each(['Arguments', 'Array', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function (name) {
            var self = this;
            _['is' + this] = function (obj) {
                return _.toString.call(obj) === '[object ' + self + ']';
            };
        });
        _.now = Date.now || function () {
            return (new Date).getTime();
        };
        _.throttle = function (func, wait, options) {
            var timeout, context, args, result;
            var previous = 0;
            if (!options) options = {};
            var later = function () {
                previous = options.leading === false ? 0 : _.now();
                timeout = null;
                result = func.apply(context, args);
                if (!timeout) context = args = null;
            };
            var throttled = function () {
                var now = _.now();
                if (!previous && options.leading === false) previous = now;
                var remaining = wait - (now - previous);
                context = this;
                args = arguments;
                if (remaining <= 0 || remaining > wait) {
                    if (timeout) {
                        clearTimeout(timeout);
                        timeout = null;
                    }
                    previous = now;
                    result = func.apply(context, args);
                    if (!timeout) context = args = null;
                } else if (!timeout && options.trailing !== false) {
                    timeout = setTimeout(later, remaining);
                }
                return result;
            };
            throttled.cancel = function () {
                clearTimeout(timeout);
                previous = 0;
                timeout = context = args = null;
            };
            return throttled;
        };
        var regExpEscape = function (pattern) {
            return pattern.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        };
        $.fn.ref2link = $.fn.ref2link || {};
        $.fn.ref2link.version = "1";
        $.fn.ref2link.errors = [];
        $.fn.ref2link.defaultFilters = {
            environments: ['*'],
            targets: [],
            types: [],
        };
        $.fn.ref2link.regExpEscape = regExpEscape;
        $.fn.ref2link.filters = $.extend(true, {}, $.fn.ref2link.defaultFilters);
        $.fn.ref2link.converters = $.extend({}, {
            pad: function (str, pad, len, position) {
                var chars = len - ('' + str).length;
                if (chars > 0) {
                    switch (position) {
                        case 'right':
                            return str + ('' + pad).repeat(chars);
                        case 'left':
                        default:
                            return ('' + pad).repeat(chars) + str;
                    }
                }
                return str;
            }, year: function (str) {
                if (('' + str).length == 4) {
                    return str;
                }
                if (('' + str).length == 2) {
                    var y = parseInt(str, 10);
                    if (y <= 57) {
                        return '20' + str;
                    } else {
                        return '19' + str;
                    }
                }
                if (!str) {
                    return (new Date()).getFullYear();
                }
            }, trim: function (str, chars) {
                if ($.trim(chars)) {
                    var re = new RegExp("^[" + regExpEscape(chars) + "]+|[" + regExpEscape(chars) + "]+$", "g");
                    return str.replace(re, '');
                } else {
                    return $.trim(str);
                }
            }, replace: function (str, what, replacement) {
                while (str.indexOf(what) >= 0) {
                    str = str.replace(what, replacement);
                }
                return str;
            }, length: function (obj) {
                return obj && obj.hasOwnProperty('length') ? obj.length : 0;
            }, split: function (str, delimiter) {
                return str.split(delimiter);
            }, _default: function (str, defaultValue) {
                return str || (defaultValue ? unescape(defaultValue) : '') || ''
            }, number_from_roman: function (input) {
                var romans = {
                    i: 1,
                    v: 5,
                    x: 10,
                    l: 50,
                    c: 100,
                    d: 500,
                    m: 1000,
                }, pos = 0, char, nextchar, thisSum, result = 0;
                input = input.toLowerCase();
                while (pos < input.length) {
                    char = input[pos];
                    if (pos != input.length) {
                        nextchar = input[pos + 1];
                        if (romans[char] < romans[nextchar]) {
                            thisSum = romans[nextchar] - romans[char];
                            result += thisSum;
                            pos += 2;
                        } else {
                            result += romans[char];
                            pos++;
                        }
                    } else {
                        result += romans[char];
                        pos++;
                    }
                }
                return result;
            }, upper: function (t) {
                return t.toUpperCase();
            }, lower: function (t) {
                return t.toLowerCase();
            }, urlencode: function (url) {
                return encodeURIComponent(url);
            },
        }, $.fn.ref2link.converters || {});
        $.fn.ref2link.simpleParse = function (tpl, data) {
            return tpl.replace(/\{\{\s*\$([^}]+?)\s*\}\}/ig, function (match, varName) {
                return varName && data.hasOwnProperty(varName) ? data[varName] : '';
            });
        };
        $.fn.ref2link.stopEvent = function (ev) {
            ev.preventDefault();
            ev.stopPropagation();
            ev.stopImmediatePropagation();
            return false;
        };
        var simpleParse = $.fn.ref2link.simpleParse,
            stopEvent = $.fn.ref2link.stopEvent,
            showTooltipHandler = function (ev) {
                var $self = $(ev.target).closest('.ref2link-generated,.ref2link-tooltip'),
                    $tooltip = $self.data('tooltip'), ref2link, alternatives;
                if ($self.is('.ref2link-tooltip')) {
                    $self = _.isString($self.data('ref2link')) ? JSON.parse($self.data('ref2link')) : $self.data('ref2link');
                    $tooltip = $self.data('tooltip');
                }
                ref2link = $self.getRef2linkMatch();
                alternatives = alternativesUnion(ref2link.alternatives, []);
                if (alternatives.length < 2 && 'view' == ($.fn.ref2link.options.mode || $.fn.ref2link.defaultOptions.mode)) {
                    return;
                }
                alternatives.sort(orderSorter);
                hideTooltipHandler();
                if ($tooltip && $tooltip.length) {
                    var hideTimer = $tooltip.data('hidetimer');
                    if (hideTimer) {
                        clearTimeout(hideTimer);
                    }
                    repositionTooltipHandler($self, $tooltip);
                    $tooltip.show();
                    return;
                }
                $tooltip = $(simpleParse($.fn.ref2link.options.tooltip || $.fn.ref2link.defaultOptions.tooltip, ref2link));
                var $table = $tooltip.find('.table');
                var lastRule = null, lastMatch = null, renderedViews = [];
                $.each(alternatives, function () {
                    var viewKey = [this.rule.rulelibelle, this.view].join('-----');
                    if (renderedViews.indexOf(viewKey) >= 0) {
                        return;
                    }
                    var tpl, $row, $view = $(this.view),
                        $viewLink = $view.is('a') ? $view : $view.find('a');
                    if (!lastMatch) lastMatch = this.reference;
                    if (this.reference != lastMatch) {
                        var $subtooltip = $(simpleParse($.fn.ref2link.options.tooltip || $.fn.ref2link.defaultOptions.tooltip, this));
                        $table = $subtooltip.find('.table');
                        $tooltip.append($table);
                        lastRule = null;
                        lastMatch = this.match;
                    }
                    if (this.rule.rulelibelle != lastRule) {
                        tpl = ($.fn.ref2link.options.ruleHeading || $.fn.ref2link.defaultOptions.ruleHeading);
                        $row = $(simpleParse(tpl, {
                            rulelibelle: this.rule.rulelibelle,
                            match: ref2link.reference,
                        }));
                        $table.append($row);
                        lastRule = this.rule.rulelibelle;
                    }
                    tpl = ($.fn.ref2link.options.rule || $.fn.ref2link.defaultOptions.rule);
                    $row = $(simpleParse(tpl, {
                        title: $viewLink.attr('title'),
                        href: $viewLink.attr('href'),
                    }));
                    $row.data('alternative', this);
                    if ($viewLink.attr('href') == $self.attr('href') && $viewLink.html() == $self.html()) {
                        if ($row.is('.active-indicator')) {
                            $row.addClass('active').attr('title', 'Current link');
                        }
                    }
                    $table.append($row);
                    renderedViews.push(viewKey);
                });
                if ('edit' == ($.fn.ref2link.options.mode || $.fn.ref2link.defaultOptions.mode)) {
                    $row = $(simpleParse($.fn.ref2link.options.rule, {
                        'title': 'No link',
                        'href': ''
                    }));
                    $row.attr('title', 'Removes the link');
                    $table.append($row.removeClass('active-indicator').attr('data-action', 'remove'));
                }
                $tooltip.on('click', '[data-action]', function (ev) {
                    var $this = $(this), $row = $this.closest('.row'),
                        alternative = $row.length ? $row.data('alternative') : {},
                        $view = alternative ? $(alternative.view) : $(''),
                        $viewLink = $view.is('a') ? $view : $view.find('a'),
                        action = $this.attr('data-action');
                    switch (action) {
                        case 'preview':
                            if ($viewLink.length) window.open($viewLink.attr('href'));
                            break;
                        case 'use':
                            if ($view.length) {
                                $view.setRef2linkMatch(ref2link);
                                $tooltip.hide();
                                showAlert($self, 'success', 'Link was replaced with "' + $viewLink.attr('title') + '"');
                                $self.parentsUntil(':not(.ref2link-generated)').last().replaceWith($view);
                            }
                            break;
                        case 'remove':
                            showAlert($self, 'danger', 'Link was removed');
                            var $container = $self.parentsUntil(':not(.ref2link-generated)');
                            if ($container.length) {
                                $self = $container;
                            }
                            $self.unparseTextRules();
                            break;
                        case 'default-preview':
                            window.open($self.attr('href'));
                            break;
                        case 'close':
                            $tooltip.hide();
                            break;
                    }
                    hideTooltipHandler();
                    return stopEvent(ev);
                });
                repositionTooltipHandler($self, $tooltip);
                $tooltip.show();
                $('body').append($tooltip);
                $self.data('tooltip', $tooltip);
                $tooltip.data('tooltip', $tooltip);
                $tooltip.data('ref2link', $self);
            }, repositionTooltipHandler = function ($el, $tooltip) {
                var zIndex = 1, offset = $el.offset();
                $el.parents().each(function () {
                    zIndex = Math.max(parseInt($(this).css('z-index').replace(/\D+/g, ''), 10) || 1, zIndex);
                });
                $tooltip.css({
                    zIndex: zIndex + 100,
                    top: offset.top + $el.height(),
                    left: offset.left,
                });
            }, hideTooltipHandler = function ($tooltips) {
                $(document).find('.ref2link-tooltip').each(function () {
                    var $this = $(this), hideTimer = $(this).data('hidetimer');
                    if (hideTimer) {
                        clearTimeout(hideTimer);
                    }
                    hideTimer = setTimeout(function () {
                        $this.hide();
                    }, 50);
                    $(this).data('hidetimer', hideTimer);
                });
            }, showAlert = function ($target, alertType, msg, close) {
                var $alert = $(simpleParse(($.fn.ref2link.options.alert || $.fn.ref2link.defaultOptions.alert), {
                    alertType: alertType,
                    msg: msg,
                }));
                $('body').append($alert);
                $alert.css({
                    position: 'absolute',
                    left: $target.offset().left,
                    top: $target.offset().top + $target.height()
                });
                setTimeout(hideAlert.bind($alert.get(0)), close || 3000);
                return $alert;
            }, hideAlert = function () {
                $(this).remove();
            };
        $.fn.ref2link.triggers = {
            'shift+click': {
                show: ['click', 'a.ref2link-generated', function (ev) {
                    if (!ev.shiftKey) {
                        return;
                    }
                    showTooltipHandler.apply(this, arguments);
                    return stopEvent(ev);
                }],
                hide: ['click', ':not(.ref2link-generated)', hideTooltipHandler],
            },
            'mouseenter': {
                show: ['mouseenter', 'a.ref2link-generated,.ref2link-tooltip', showTooltipHandler],
                hide: ['mouseleave', 'a.ref2link-generated,.ref2link-tooltip', hideTooltipHandler]
            },
            'notooltip': {show: null, hide: null}
        };
        $.fn.ref2link.editOptions = {
            tooltipTrigger: 'shift+click',
            tooltip: '<div class="ref2link-tooltip table-responsive" title=""><div class="table table-condensed table-hover"><div class="row heading"><div class="col-xs-12 big">{{$reference}}</div></div></div></div>',
            ruleHeading: '<div class="row table-header hidden-xs" title="Resource group"><div class="col-xs-12 big"><i class="fa fa-database"></i>{{$rulelibelle}}</div></div>',
            rule: '<div class="row active-indicator" title="Set link:&quot;{{$title}}&quot;" data-action="use"><div class="col-xs-2 col-actions"><i class="fa fa-link"></i><i class="fa fa-unlink text-danger"></i></div><div class="col-xs-9">{{$title}}<i class="fa fa-arrow-circle-right" data-action="preview" title="Preview link in a new tab"></i></div></div>',
            alert: '<div class="alert alert-dismissable alert-{{$alertType}}" role="role"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>{{$msg}}</div>',
            mode: 'edit'
        };
        $.fn.ref2link.viewOptions = {
            tooltipTrigger: 'mouseenter',
            tooltip: '<div class="ref2link-tooltip" title=""><div class="clearfix"><div class="table-responsive"><table class="table table-condensed table-hover"></table></div></div></div>',
            ruleHeading: '',
            rule: '<tr class="row active-indicator" style="margin:5px 0" data-action="preview" title="Open in new tab"><td class="col-xs-2"><i class="fa fa-check" data-flag="active"></i></td><td class="col-xs-9">{{$title}}</td></tr>',
            alert: '<div class="alert alert-dismissable alert-{{$alertType}}" role="role"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>{{$msg}}</div>',
            mode: 'view'
        };
        $.fn.ref2link.notooltipOptions = {tooltipTrigger: 'notooltip',};
        $.fn.ref2link.options = $.fn.ref2link.options || {};
        $.fn.ref2link.defaultOptions = $.extend({}, $.fn.ref2link.viewOptions);
        var ref2linkRules = [], runtimeRules = [];
        var rulesReference = {};
        $.fn.ref2link.compileRule = function (rule) {
            if (!rule.hasOwnProperty('compiled')) {
                try {
                    rule.pattern = new RegExp((rule.pattern.source || rule.pattern), "gm" + (rule.casesensitive ? '' : 'i'));
                } catch (e) {
                    $.fn.ref2link.errors.push({
                        message: '' + e,
                        file: rule.file || rule.pattern,
                        extra: rule,
                    });
                }
                try {
                    rule.fullPattern = new RegExp((rule.fullPattern.source || rule.fullPattern), 'gm' + (rule.casesensitive ? '' : 'i'));
                } catch (e) {
                    $.fn.ref2link.errors.push({
                        message: '' + e,
                        file: rule.file || rule.pattern,
                        extra: rule,
                    });
                    console.log(e, rule);
                }
                rule.views.sort(orderSorter);
                $.each(rule.views, function () {
                    eval('this.template=function(){with(rule,$.fn.ref2link.converters){return(' + this.template + ').apply(this,arguments);}}');
                    if (this.hasOwnProperty('condition')) {
                        eval('this.condition=function(){with(rule,$.fn.ref2link.converters){return(' + this.condition + ').apply(this,arguments);}}');
                    } else {
                        this.condition = function () {
                            return true;
                        }
                    }
                });
                rule.compiled = true;
            }
            return rule;
        };
        $.fn.ref2link.globalMatches = {};
        $.fn.ref2link.globalViews = {};
        $.fn.ref2link.globalRule = {pattern: '',};
        $.fn.ref2link.applyGlobalRule = function (text) {
            var args, matches = {}, match, rule,
                rules = $.fn.ref2link.getRules();
            if (!rules.length) {
                return {};
            }
            while ((args = $.fn.ref2link.globalRule.pattern.exec(text))) {
                match = args[0];
                if ($.fn.ref2link.globalMatches.hasOwnProperty(match)) {
                    matches[match] = $.fn.ref2link.globalMatches[match];
                    matches[match].counter++;
                    continue;
                }
                for (var i = 1; i <= args.length - 1; i++) {
                    if (args[i] && i - 1 < rules.length) {
                        rule = rules[i - 1];
                        var fullPattern = new RegExp((rule.fullPattern.source || rule.fullPattern).replace(/^\/|\/[giumxns]*$/g, ''), 'gm' + (rule.casesensitive ? '' : 'i')),
                            fullArgs = fullPattern.exec(args[i]),
                            ruleType = $.trim(fullArgs ? fullArgs[1] || rule.type : rule.type),
                            reference = fullArgs ? fullArgs[2] || fullArgs[4] || '' : '',
                            title = fullArgs ? fullArgs[3] || '' : '',
                            controlExpr = "[^\\]\\|]+";
                        if (title) {
                            controlExpr = "\\[" + controlExpr + "\\s*\\|\\s*[^\\]]+?\\]";
                        }
                        controlExpr = '(' + regExpEscape(rule.type) + ')' + (rule.forced ? '' : '?') + controlExpr;
                        controlExpr = new RegExp(controlExpr, 'i');
                        if (!controlExpr.test(args[i])) {
                            console.log('match does not match the complete rule format', args[i], rule, ruleType, controlExpr);
                            continue;
                        }
                        if (!reference) {
                            console.log('match does not match base pattern', args[i], rule);
                            continue;
                        }
                        if (!title && !rule.forced && match[0] != '[' && match.indexOf(rule.type) < 0 && match[match.length - 1] == ']') {
                            match = $.fn.ref2link.converters.trim(match, '[]');
                        }
                        var appliedRule = $.fn.ref2link.applyRule(reference, rule, title, match);
                        if (appliedRule) {
                            match = appliedRule.wholeMatch;
                            if (!matches.hasOwnProperty(match)) {
                                matches[match] = appliedRule;
                            } else {
                                if (matches[match].rule != appliedRule.rule) {
                                    matches[match].alternatives = matches[matches].alternatives.concat(appliedRule.alternatives);
                                    matches[match].alternatives.sort(orderSorter);
                                }
                            }
                        } else {
                            continue;
                        }
                    } else if (args[i]) {
                        continue;
                    }
                }
                if (matches.hasOwnProperty(match)) {
                    matches[match].counter++;
                }
            }
            $.fn.ref2link.globalMatches = $.extend(true, {}, $.fn.ref2link.globalMatches, matches);
            return matches;
        };
        var getReferences = function () {
            var $this = $(this), inTextMatches = {},
                $ref2links = $this.find('.ref2link-generated');
            if (!$ref2links.length) {
                var $content = $('<div>' + $this.html() + '</div>');
                $content.parseReferences();
                $ref2links = $content.find('.ref2link-generated');
            }
            $ref2links.each(function () {
                var reference = $(this).getRef2linkMatch('match');
                inTextMatches[reference] = $.fn.ref2link.globalMatches[reference];
            });
            return inTextMatches;
        };
        $.fn.getReferences = function () {
            return identity(getReferences.call(this));
        };
        $.fn.getFormattedReferences = function (format) {
            format = format || 'identity';
            var formatter = format, references = $(this).getReferences();
            ;
            if (_.isString(format)) {
                formatter = $.fn.ref2link.formatters[format];
            }
            return formatter(references, $(this).html());
        };
        var matchIdentity = function () {
            var match = {
                count: this.counter,
                match: this.match,
                wholeMatch: this.wholeMatch,
                type: this.rule.type,
                label: this.rule.rulelibelle,
                views: [],
            }, defaultView, renderedViews = [];
            this.alternatives.sort(orderSorter);
            var defaultRendered = false;
            $.each(this.alternatives.reverse(), function () {
                if (this.viewName == '_default' || !$.trim(this.view) || renderedViews.indexOf(this.view) >= 0) {
                    return;
                }
                match.views.push({
                    target: this.viewName,
                    view: this.view,
                    _default: !defaultRendered,
                    order: this.order,
                });
                defaultRendered = true;
                renderedViews.push(this.view);
            });
            return match;
        }, identity = function (inTextMatches) {
            var result = [];
            $.each(inTextMatches, function () {
                result.push(matchIdentity.call(this));
            });
            return result;
        };
        $.fn.ref2link.formatters = {
            identity: function (inTextMatches) {
                return {
                    result: identity(inTextMatches),
                    type: 'x-internal/references',
                    extension: 'ref2link',
                };
            }, ref2table: function (references) {
                var result = '';
                var indent = function (indent, text) {
                    return ' '.repeat(2 * indent) + text + '\r\n';
                }, escapeHTML = function (text) {
                    return $('<div><div>').text(text).html();
                };
                for (var j = 0; j < references.length; j++) {
                    var views = '', defaultRendered = false;
                    $.each(references[j].views, function () {
                        if (!this.view) {
                            return;
                        }
                        views += indent(3, '<view target="' + escapeHTML(this.target) + '"' + (!defaultRendered ? ' _default="true"' : '') + '><![CDATA[' + this.view + ']]></view>');
                        defaultRendered = true;
                    });
                    result += indent(1, '<record number="' + (j + 1) + '">');
                    result += indent(2, '<reference count="' + references[j].count + '">' + escapeHTML(references[j].match) + '</reference>');
                    result += indent(2, '<type>' + escapeHTML(references[j].type) + '</type>');
                    result += indent(2, '<libelle>' + escapeHTML(references[j].label) + '</libelle>');
                    result += indent(2, '<views>') + views + indent(2, '</views>');
                    result += indent(1, '</record>');
                }
                return {
                    result: '<resultset size="' + references.length + '">\r\n' + result + '</resultset>',
                    type: 'application/xml',
                    ext: 'xml',
                };
            }, html: function (references, text) {
                return {result: text, type: 'text/html', ext: 'html',};
            }, email: function (references, text) {
                return {
                    result: $('<div>' + text + '</div>').find('a.ref2link-generated').each(function () {
                        var $this = $(this), href = $this.attr('href'),
                            title = $this.attr('title');
                        $this.replaceWith($this.text() + '["' + title + '" ' + href + ']');
                    }).end().text(), type: 'text/plain', ext: 'txt',
                };
            }
        };
        $.fn.ref2link.compileGlobalRule = function (rules) {
            var patterns = [], types = [];
            $.each(rules, function () {
                var p = '' + (this.fullPattern.source || this.fullPattern);
                p = p.replace(/\((?!\?)/g, function (match, position) {
                    if (position == 0 || (position > 0 && p[position - 1] != '\\')) {
                        return '(?:';
                    }
                    return match;
                });
                patterns.push('(' + p + ')');
            });
            console.log('patterns', patterns);
            $.fn.ref2link.globalRule.pattern = new RegExp(patterns.join('|'), 'igm');
        };
        $.fn.ref2link.addRules = function (rules) {
            runtimeRules = [];
            console.log('initial rules', rules);
            $.each(rules, function () {
                var rule = $.fn.ref2link.compileRule(this),
                    ruleKey = [rule.pattern.source, rule.type, rule.rulelibelle].join('--');
                if (rulesReference.hasOwnProperty(ruleKey)) {
                    ref2linkRules[rulesReference[ruleKey]] = rule;
                } else {
                    ref2linkRules.push(rule);
                    rulesReference[ruleKey] = ref2linkRules.length - 1;
                    $.fn.ref2link.globalMatches = {};
                }
            });
        };
        $.fn.ref2link.setFilter = function (searchedField, searchValue) {
            if ($.fn.ref2link.filters.hasOwnProperty(searchedField) && _.isArray(searchValue)) {
                if (searchedField == 'environments') {
                    var filteredEnvironments = [],
                        globalEnvironments = Object.keys($.fn.ref2link.getGlobalEnvironments());
                    $.each(searchValue, function () {
                        if (globalEnvironments.indexOf('' + this) >= 0) {
                            filteredEnvironments.push('' + this);
                        }
                    });
                    if (filteredEnvironments.indexOf('*') < 0) {
                        filteredEnvironments.push('*');
                    }
                    searchValue = filteredEnvironments;
                    var filteredRules = $.fn.ref2link.getRules(),
                        availableTargets = [];
                    $.each(filteredRules, function () {
                        $.each(this.views, function () {
                            var targetName = this.target;
                            if (availableTargets.indexOf(targetName) < 0) {
                                availableTargets.push(targetName);
                            }
                        })
                    });
                    if ($.fn.ref2link.filters['targets'].length) {
                        $.fn.ref2link.filters['targets'] = _.intersect($.fn.ref2link.filters['targets'], availableTargets);
                    } else {
                        $.fn.ref2link.filters['targets'] = availableTargets;
                    }
                }
                $.fn.ref2link.filters[searchedField] = searchValue;
                runtimeRules = [];
                textCaches = {};
            }
        };
        $.fn.ref2link.getFiltersWithDependencies = function () {
            var byEnv = {};
            var byRule = {};
            $.each(ref2linkRules, function () {
                var rule = this;
                if (!byRule.hasOwnProperty(rule.type)) {
                    byRule[rule.type] = [];
                }
                $.each(this.views, function () {
                    var view = this;
                    $.each(this.environments, function () {
                        if (!byEnv.hasOwnProperty(this)) {
                            byEnv[this] = {types: [], targets: [],}
                        }
                        if (byEnv[this].types.indexOf(rule.type) < 0) {
                            byEnv[this].types.push(rule.type);
                        }
                        if (byEnv[this].targets.indexOf(view.target) < 0) {
                            byEnv[this].targets.push(view.target);
                        }
                    });
                    byRule[rule.type].push(view.target);
                });
            });
            return {byEnvironment: byEnv, byRule: byRule};
        };
        $.fn.ref2link.getGlobalEnvironments = function () {
            var envs = {};
            $.each(ref2linkRules, function () {
                $.each(this.views, function () {
                    $.each(this.environments, function () {
                        envs[this] = this;
                    });
                });
            });
            envs['*'] = 'Public';
            return envs;
        };
        $.fn.ref2link.getGlobalTypes = function () {
            var types = {};
            $.each(ref2linkRules, function () {
                types[this.type] = this.rulelibelle;
            });
            return types;
        };
        $.fn.ref2link.getGlobalTargets = function () {
            var targets = {};
            $.each(ref2linkRules, function () {
                $.each(this.views, function () {
                    targets[this.target] = this.target;
                });
            });
            return targets;
        };
        _.intersect = function (a, b) {
            var t;
            if (b.length > a.length) t = b, b = a, a = t;
            return a.filter(function (e) {
                return b.indexOf(e) > -1;
            });
        };
        var alternativesUnion = function (left, right) {
            var viewKeys = {}, alternativeWalker = function () {
                var viewKey = [this.match, this.rule.pattern.source, this.view].join('-----');
                if (viewKeys.hasOwnProperty(viewKey)) {
                    return;
                }
                viewKeys[viewKey] = this;
            };
            $.each(left, alternativeWalker);
            $.each(right, alternativeWalker);
            return $.map(viewKeys, function (alternative) {
                return alternative;
            }).sort(orderSorter);
        }, orderSorter = function (left, right) {
            return left.order - right.order;
        };
        $.fn.ref2link.getRules = function (filters) {
            filters = filters || $.fn.ref2link.filters;
            if (!runtimeRules.length) {
                $.each(ref2linkRules, function () {
                    if (!filters.types.length || filters.types.indexOf(this.type) >= 0) {
                        var rule = $.extend(true, {}, this), views = [],
                            foundAView = false;
                        rule.views = views;
                        $.each(this.views, function () {
                            if ((_.intersect(filters.environments, this.environments) || (this.environments.indexOf('*') >= 0)) && (!filters.targets.length || filters.targets.indexOf(this.target) >= 0)) {
                                views.push($.extend(true, {}, this));
                                foundAView = true
                            }
                        });
                        views.sort(orderSorter);
                        if (foundAView) {
                            runtimeRules.push(rule);
                        } else {
                            console.log('rule', rule, ' has no valid view...skipping');
                        }
                    } else {
                        console.log('rule', rule, ' is not a valid type...skipping');
                    }
                });
                runtimeRules.sort(orderSorter);
                this.compileGlobalRule(runtimeRules);
            }
            return runtimeRules;
        };
        eval('$.fn.ref2link.addRules(' + Base64.decode('') + ')');
        $.fn.ref2link.applyRule = function (text, rule, overrideTitle, wholeMatch) {
            var pattern = new RegExp(rule.pattern.source.replace(/^\(\?:\\b\)/, ''), 'gm' + (rule.casesensitive ? '' : 'i')),
                args = pattern.exec(text), ref2link = {
                    rule: rule,
                    pattern: rule.pattern.source,
                    match: text,
                    views: [],
                    alternatives: [],
                    counter: 0,
                    reference: text,
                    link: overrideTitle || text,
                    wholeMatch: wholeMatch || text,
                };
            if (!args) {
                return null;
            }
            ref2link.reference = args[1];
            $.each(rule.views, function () {
                var viewName = this.target;
                var isEnabled = (_.intersect($.fn.ref2link.filters.environments, this.environments).length || this.environments.indexOf('*') >= 0) && (!$.fn.ref2link.filters.targets.length || $.fn.ref2link.filters.targets.indexOf(this.target) >= 0) && (!$.fn.ref2link.filters.types.length || $.fn.ref2link.filters.types.indexOf(rule.type) >= 0);
                if (isEnabled && this.condition.apply(this, args)) {
                    ref2link.views[viewName] = this.template.apply(this, args);
                    var $rendered = $('<div></div>').append(ref2link.views[viewName]),
                        renderedText;
                    $rendered.find('a,[role-link]').each(function () {
                        var $view = $(this);
                        $view.addClass('ref2link-generated');
                        $.fn.ref2link.linkClassName && $view.addClass($.fn.ref2link.linkClassName);
                        if ($.fn.ref2link.viewUsesTarget) {
                            ($view.is('a') ? $view : $view.find('a')).attr('target', '_blank');
                        } else {
                            ($view.is('a') ? $view : $view.find('a')).removeAttr('target');
                        }
                        if (($.fn.ref2link.viewTitlePrefix || $.fn.ref2link.viewTitleSuffix) && $view.attr('title')) {
                            var titleParts = [($.fn.ref2link.viewTitlePrefix || '').toString(), $view.attr('title').toString(), ($.fn.ref2link.viewTitleSuffix || '').toString()];
                            $view.attr('title', $.trim(titleParts.join(' ')));
                        }
                        if (overrideTitle) {
                            ($view.is('a') ? $view : $view.find('a')).html(overrideTitle);
                        }
                        $view.attr('data-ref2link-initial', wholeMatch);
                    });
                    ref2link.views[viewName] = $rendered.html();
                    ref2link.alternatives.push({
                        rule: rule,
                        view: ref2link.views[viewName],
                        viewName: viewName,
                        match: text,
                        order: this.order,
                        reference: args[1],
                        link: overrideTitle || text,
                        wholeMatch: wholeMatch || text,
                    });
                    renderedText = overrideTitle || $rendered.find('[href]').text();
                    $.fn.ref2link.globalViews[renderedText] = wholeMatch || text;
                }
            });
            return ref2link;
        };
        $.fn.ref2link.positionHandler = _.throttle(function () {
            $('.ref2link-tooltip').each(function () {
                var $tooltip = $(this), $el = $tooltip.data('ref2link');
                repositionTooltipHandler($el, $tooltip);
            });
        }, 200);
        $.fn.ref2link.bindTooltips = function () {
            if ($.fn.ref2link.options.tooltipTrigger == 'notooltip' || $.fn.ref2link.initialized) {
                return;
            }
            $.fn.ref2link.initialized = true;
            addStyle(" \n.ref2link-tooltip{position: absolute;display: block;background: white;visibility: visible;padding: 2px;color: black;font-size: 1rem;cursor: default;overflow: hidden;min-width: 16rem;border: 1px solid #AFAFAF;border-radius: 0.5rem;-webkit-box-shadow: 10px 10px 5px -5px rgba(28,28,28,0.5);-moz-box-shadow: 10px 10px 5px -5px rgba(28,28,28,0.5);box-shadow: 10px 10px 5px -5px rgba(28,28,28,0.5);}.ref2link-tooltip .table{margin-bottom: 0px;width: 100%;}.ref2link-tooltip .active td{background-color: transparent !important;}.ref2link-tooltip .table .row{border-bottom: 1px solid #CFCFCF;margin: 0 0 4px 0;cursor: pointer;}.ref2link-tooltip .table .row>*{overflow: hidden;}.ref2link-tooltip .table:last-of-type .row:last-of-type{border-bottom-width: 0;}.ref2link-tooltip .table-header{cursor: help;}.ref2link-tooltip .heading{cursor: default;}.ref2link-tooltip .table-header:hover{background-color: inherit !important;}.ref2link-tooltip i[data-action=preview]{min-width: 20px;text-align: center;height: 1.5rem;}.ref2link-tooltip .col-actions + .col-xs-9{padding-right: 30px;}.ref2link-tooltip .col-actions>*,.ref2link-tooltip i[data-action=preview],.ref2link-tooltip .row:not([data-remove]) .fa-unlink,.ref2link-tooltip i[data-flag]{display: none;}.ref2link-tooltip .active-indicator:hover i[data-action=preview],.ref2link-tooltip .active .col-actions>.fa-link,.ref2link-tooltip .active-indicator:hover .col-actions>.fa-link,.ref2link-tooltip [data-action=remove]:hover .col-actions>.fa-unlink,.ref2link-tooltip .active [data-flag=active]{display: block;}.ref2link-tooltip .active-indicator:hover i[data-action=preview]{position: absolute;right: 0;top: 0;}.ref2link-tooltip .big{font-size: 1.3rem;font-weight: 600;}.ref2link-tooltip .table + .ref2link-tooltip .table:before{display:block;height: 15px;content: \' \';clear:both;}", "ref2link.css");
            try {
                document.execCommand('AutoUrlDetect', false, false);
            } catch (e) {
            }
            var trigger = $.fn.ref2link.triggers[$.fn.ref2link.options.tooltipTrigger || $.fn.ref2link.defaultOptions.tooltipTrigger],
                $selector = $(trigger.show[4] || trigger.selector || document);
            $selector.on.apply($selector, trigger.show);
            $selector.on.apply($selector, trigger.hide);
            $(window).off('resize', $.fn.ref2link.positionHandler).on('resize', $.fn.ref2link.positionHandler);
        };
        $.fn.ref2link.clearCache = function () {
            textCaches = {};
            $.fn.ref2link.globalMatches = {};
            $.fn.ref2link.globalViews = {};
            states = {};
            extracts = [];
        };
        $.fn.reverse = $.fn.reverse || [].reverse;
        var extracts = [];
        var extract = function ($node, selector, whole) {
            var extractCounter = extracts.length;
            $node.find(selector).each(function () {
                var $this = $(this),
                    html = '<ref2link-object oid="' + extractCounter + '">';
                if (whole) {
                    html += $this.html();
                }
                html += '</ref2link-object>';
                $this.replaceWith(html);
                var e = {$this: $this, whole: whole,};
                extracts.push(e);
                extractCounter++;
            });
        }, unExtractNode = function () {
            var $this = $(this), index = parseInt($this.attr('oid'), 10),
                object = index < extracts.length ? extracts[index] : null;
            if (!object) {
                return;
            }
            var $original = object.$this.clone();
            if (object.whole) {
                $original.html($this.html());
            }
            unExtract($original);
            $this.replaceWith($original);
        }, unExtract = function ($node) {
            $node.find('ref2link-object').reverse().each(function () {
                return unExtractNode.call(this);
            });
        };
        $.fn.fastParseText = function (rule) {
            console.warn('fastParseText is deprecated;parsing with all the enabled rules instead');
            return $(this).parseReferences();
        };
        var lastDeferred = null, textCaches = {}, s = (new Date()).getTime(),
            counter = 0;
        $.fn.parseReferences = function () {
            $.fn.ref2link.bindTooltips();
            var $self = $(this);
            $self.find('[xmlns]').removeAttr('xmlns');
            $self.find('[xmlns\\:ddwrt]').removeAttr('xmlns:ddwrt');
            extract($self, 'script,a,img,:input,iframe', false);
            extract($self, '[onclick],form', true);
            var html = $self.html(),
                matches = $.fn.ref2link.applyGlobalRule(html),
                keys = Object.keys(matches);
            keys.sort(function (left, right) {
                return right.length - left.length;
            });
            for (var i = 0; i < keys.length; i++) {
                match = keys[i];
                if (!matches.hasOwnProperty(match)) {
                    continue;
                }
                var appliedRule = matches[match],
                    view = appliedRule.views.length ? appliedRule.views[0] : '';
                if (!view) {
                    $.each(appliedRule.alternatives, function () {
                        if (this.view) {
                            view = this.view;
                            return false;
                        }
                    });
                }
                if (view) {
                    var $view = $('<div>' + view + '</div>');
                    extract($view, 'a.ref2link-generated', false);
                    html = html.replace(new RegExp(regExpEscape(match), 'g'), function () {
                        return $view.html();
                    });
                }
            }
            $self.html(html);
            $self.addClass('ref2link-parsed');
            unExtract($self);
            return this;
        };
        var states = {}, stateCounter = 0;
        var preserveStates = function ($node) {
            $node.find(':input').each(function () {
                var $this = $(this), index = $this.attr('state-id'),
                    state = {props: {}, attrs: {}};
                if (typeof(index) === 'undefined') {
                    index = stateCounter++;
                    $this.attr('state-id', index);
                } else {
                    index = parseInt(index, 10);
                }
                _.each(['checked', 'disabled', 'readonly', 'value', 'defaultChecked', 'selected', 'selectedIndex', 'defaultSelected'], function (propIndex, propName) {
                    state.props[propName] = $this.prop(propName);
                    if (typeof($this.attr(propName)) !== 'undefined') {
                        state.attrs[propName] = $this.attr(propName);
                    }
                });
                states[index] = state;
            });
        }, restoreStates = function ($node) {
            $node.find(':input').each(function () {
                var $this = $(this), stateId = $this.attr('state-id');
                if (typeof(stateId) !== 'undefined') {
                    $this.attr(states[stateId].attrs);
                    $this.prop(states[stateId].props);
                }
            });
        };
        $.fn.parseDeferred = function (rules) {
            if (!$.isArray(rules) || !rules.length) {
                rules = $.fn.ref2link.getRules();
            }
            var stack = [];
            preserveStates($(this));
            $(this).each(function () {
                var self = this, $self = $(self).clone(), d = $.Deferred();
                stack.push(d);
                d.start = function () {
                    if ($(self).is('[ref2link-parsed]')) {
                        counter++;
                        return d.reject(false);
                    }
                    var text = $self.html();
                    if (!textCaches.hasOwnProperty(text)) {
                        setTimeout(function () {
                            $self.parseReferences();
                            textCaches[text] = $self.html();
                            $(self).trigger('before-replace.ref2link').html(textCaches[text]).attr('ref2link-parsed', true).trigger('after-replace.ref2link');
                            d.resolve(true);
                            counter++;
                        }, 1);
                    } else {
                        $(self).html(textCaches[text]);
                        d.resolve(false);
                        counter++;
                    }
                };
                if (lastDeferred) {
                    lastDeferred.next = d;
                } else {
                    s = (new Date()).getTime();
                    counter++;
                    d.start();
                }
                lastDeferred = d;
                d.always(function () {
                    if (d.next) {
                        d.next.start();
                    } else {
                        lastDeferred = null;
                        setTimeout(function () {
                            $('[ref2link-parsed]').addClass('ref2link-container').removeAttr('ref2link-parsed');
                            restoreStates($(document));
                            $(document).trigger('parsed.ref2link');
                            console.log('Parsed in ', (new Date()).getTime() - s, 'ms');
                        }, 1);
                    }
                });
            });
            return stack;
        };
        $.fn.unparseTextRules = function () {
            ($(this).is('.ref2link-generated') ? $(this) : $(this).find('.ref2link-generated')).each(function () {
                var $ref2linkContainer = $(this).parentsUntil(':not(.ref2link-generated)');
                if (!$ref2linkContainer.length) {
                    $ref2linkContainer = $(this);
                }
                var ref2link = $ref2linkContainer.getRef2linkMatch(),
                    reference = $ref2linkContainer.attr('data-ref2link-initial');
                $(this).replaceWith(reference);
            });
            var cachekey = $(this).html();
            if (textCaches.hasOwnProperty(cachekey)) {
                delete(textCaches[cachekey]);
            }
            $('.ref2link-tooltip').remove();
        };
        $.fn.parseTextRules = $.fn.parseDeferred;
        $.fn.getRef2linkMatch = function (field) {
            var $this = $(this),
                match = $.fn.ref2link.globalViews[$this.text()],
                ref2link = $.fn.ref2link.globalMatches[match];
            if ($.isEmptyObject(ref2link)) {
                ref2link = JSON.parse($this.attr('data-ref2link') || "{}");
            }
            if ($.isEmptyObject(ref2link)) {
                return ref2link;
            }
            ref2link.reference = ref2link.hasOwnProperty('match') ? ref2link.match : $this.html();
            ref2link.match = match;
            return field ? (ref2link.hasOwnProperty(field) ? ref2link[field] : null) : ref2link;
        };
        $.fn.getParsedMatch = function () {
            var $this = $(this).closest('ref2link-container');
            if (!$this.length) {
                if (this.hasOwnProperty('prevObject')) {
                    $this = this.prevObject;
                }
            }
            if (!$this.length) {
                $this = $('<div>' + (this.hasOwnProperty('html') ? this.html() : $(this).html()) + '</div>');
            }
            $this.parseReferences();
            return $this.getRef2linkMatch();
        };
        $.fn.getReferenceInfo = function () {
            var references = getReferences.call(this);
            var result = [];
            $.each(references, function (referenceKey) {
                var reference = references[referenceKey],
                    match = matchIdentity.call(reference),
                    defaultView = match.views.length ? match.views[0] : null;
                if (!defaultView) {
                    return;
                }
                result.push({
                    pattern: reference.rule.pattern,
                    rulecasesensitive: reference.rule.casesensitive,
                    type: reference.rule.type,
                    rulelibelle: reference.rule.rulelibelle,
                    target: defaultView.target,
                    viewlibelle: defaultView.viewlibelle,
                    matchedcontent: reference.match,
                    uri: reference.match,
                    url: $(defaultView.view).attr('href')
                });
            });
            return result;
        };
        $.fn.setRef2linkMatch = function (ref2link) {
            var isMultiple = 0;
            ref2link.alternatives.sort(orderSorter);
            $.each(ref2link.alternatives, function () {
                if (this.viewName == '_default' || !this.view) {
                    return;
                }
                isMultiple++;
                if (isMultiple >= 2) {
                    return false;
                }
            });
            if (isMultiple >= 2) {
                $(this).addClass('ref2link-multiple');
            }
            return $(this).addClass('ref2link-generated');
        };
        $.fn.ref2link.info = "<p>Ref2link version:1.0.01</p>";
        var getInitialFilters = function () {
            var scriptSrc = $('script[src*="jquery-parsetext"]').first().attr('src'),
                sqv = decodeURIComponent(scriptSrc.indexOf('?') >= 0 ? scriptSrc.split('?').pop() : ''),
                lqv = decodeURIComponent(document.location.href.indexOf('?') >= 0 ? document.location.href.split('?').pop() : ''),
                qv = [sqv, lqv].join('&'), filters = {};
            if (qv) {
                var parts = qv.split('&');
                for (var i = 0; i < parts.length; i++) {
                    var p = parts[i].split('=');
                    if (p && p.length > 1 && p[1] && p[1] != '_default') {
                        if (p[0] == 're' || p[0] == 'ruleenvironment') {
                            filters['environments'] = p[1].split(',');
                        }
                        if (p[0] == 'rt' || p[0] == 'ruletarget') {
                            filters['targets'] = p[1].split(',');
                        }
                        if (p[0] == 'rr' || p[0] == 'ruletype') {
                            filters['types'] = p[1].split(',');
                        }
                    }
                }
            }
            return filters;
        };
        $.fn.ref2link.resetFilters = function () {
            var filters = getInitialFilters();
            $.fn.ref2link.filters = $.fn.ref2link.filters = $.extend(true, {}, $.fn.ref2link.defaultFilters);
            $.each(filters, function (filterName) {
                $.fn.ref2link.setFilter(filterName, this);
            });
        };
        $.fn.ref2link.linkClassName = '';
        $.fn.ref2link.viewUsesTarget = true;
        $.fn.ref2link.viewTitlePrefix = 'to';
        $.fn.ref2link.viewTitleSuffix = '';
        var addStyle = function (styleText, styleName) {
            var styleFileName = styleName.split('/').pop().split('?').shift().replace('ref2link-', ''),
                unMinifiedStyleFileName = styleFileName.replace('.min', '');
            if (!$('link[href*="' + styleFileName + '"]').length && !$('link[href*="' + unMinifiedStyleFileName + '"]').length && styleText) {
                $('head').append(x = $('<style type="text/css"></style>').html(styleText));
            }
        };
        $(function () {
            $.fn.ref2link.resetFilters();
        });
        if ($.fn.ref2link.info) {
            $(function () {
                var $info = $($.fn.ref2link.info);
                $info.find('[data-role="parsetext-version"]').html(simpleParse($info.find('[data-role="parsetext-version"]').html() || '', $.fn.ref2link));
                $('[data-role="ref2link-information"]').html($info);
            });
        }
    })(jQuery, window);


//ADDED FOR LEOS LOADING: START
    define(function (require, exports) {
        $ = require('jquery');
        // nothing to export really as it's jQuery plugin
    });
})(jQuery, window, typeof define === 'function' && define.amd ? define : function (factory) {
    if (typeof exports !== 'undefined') {
        factory(require, exports);
    }
});
//ADDED FOR LEOS LOADING: END
